(function (b) {
  "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function (a) {
    return b(a, window, document)
  }) : "object" === typeof exports ? module.exports = function (a, d) {
    a || (a = window);
    if ( ! d || ! d.fn.dataTable) d = require("datatables.net")(a, d).$;
    return b(d, a, a.document)
  } : b(jQuery, window, document)
})( function ($) {
  var f = $.fn.dataTable;

  /*
   * Loads only portion of the data
   */
  f.pageLoadMore = function (opts) {
    // Configuration options
    var conf = $.extend({
      url: '',
      data: null,
      method: 'GET'
    }, opts);

    var cacheLastRequest = null;
    var cacheLastJson    = null;

    return function (request, drawCallback, settings) {
      if ( ! settings.hasOwnProperty('pageLoadMore')) {
        var api  = new f.Api(settings);
        var info = api.page.info();

        settings.pageLoadMore = { pageLength: info.length };
      }

      var pageResetMore = false;

      if (cacheLastRequest) {
        if (
          JSON.stringify(request.order) !== JSON.stringify(cacheLastRequest.order)
          || JSON.stringify(request.columns) !== JSON.stringify(cacheLastRequest.columns)
          || JSON.stringify(request.search) !== JSON.stringify(cacheLastRequest.search)
        ) {
          pageResetMore = true;
        }
      }

      // Store the request for checking next time around
      cacheLastRequest = $.extend(true, {}, request);

      if (pageResetMore) {
        cacheLastJson  = null;
        request.length = settings.pageLoadMore.pageLength;
      }

      request.start  = request.length - settings.pageLoadMore.pageLength;
      request.length = settings.pageLoadMore.pageLength;

      // Provide the same `data` options as DataTables.
      if ($.isFunction (conf.data)) {
        // As a function it is executed with the data object as an arg
        // for manipulation. If an object is returned, it is used as the
        // data object to submit
        var d = conf.data(request);

        if (d) {
          $.extend(request, d);
        }
      } else if ($.isPlainObject(conf.data)) {
        // As an object, the data given extends the default
        $.extend(request, conf.data);
      }

      settings.jqXHR = $.ajax({
        "type": conf.method,
        "url": conf.url,
        "data": request,
        "cache": false,
        "dataType": "json",

        "success": function (json) {
          if (cacheLastJson) {
            json.data = cacheLastJson.data.concat(json.data);
          }

          cacheLastJson = $.extend(true, {}, json);
          drawCallback(json);
        }
      });
    };
  };

  /*
   * Resets page length to initial value on the next draw
   */
  f.Api.register('page.resetMore()', function () {
    return this.iterator('table', function (settings) {
      var api = this;

      if (settings.hasOwnProperty('pageLoadMore')) {
        api.page.len(settings.pageLoadMore.pageLength);
      }
    });
  });

  /*
   * Determines whether there is more data available
   */
  f.Api.register('page.hasMore()', function () {
    var api  = this;
    var info = api.page.info();

    return info.pages > 1;
  });

  /*
   * Loads more data
   */
  f.Api.register('page.loadMore()', function () {
    return this.iterator('table', function (settings) {
      var api  = this;
      var info = api.page.info();

      if (info.pages > 1) {
        if ( ! settings.hasOwnProperty('pageLoadMore')) {
          settings.pageLoadMore = { pageLength: info.length };
        }

        api.page.len(info.length + settings.pageLoadMore.pageLength).draw('page');
      }
    });
  });

  return f;
}) (jQuery);
